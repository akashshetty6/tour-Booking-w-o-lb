package com.publicissapient.tour.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

import com.publicissapient.tour.dto.BookingDTO;
import com.publicissapient.tour.dto.CustomerDTO;
import com.publicissapient.tour.dto.PackageDTO;

@Controller
public class HomeController {
	
	@Autowired
	RestTemplate rest;
	
	@PostMapping(path ="/register")
	public ModelAndView save(CustomerDTO customerDTO) throws Exception {
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<CustomerDTO> request = new HttpEntity<>(customerDTO, headers);
		
		try {	
		 rest.exchange("http://localhost:9082/registration/save", HttpMethod.POST, request,
				String.class);
		 mv.addObject("success","Registration Successful");
		 mv.setViewName("register_success");

		}catch(Exception e) {
		
			mv.addObject("failure","Email already exists");
			mv.setViewName("register_failure");
		}
		
		return mv;
	}
	
	@PostMapping(path="/createPack")
	public ModelAndView createPackage(PackageDTO packageDTO) {
		
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<PackageDTO> request = new HttpEntity<>(packageDTO, headers);
		try {
		
		rest.exchange("http://localhost:8088/admin/create",HttpMethod.POST, request,
					String.class);

		mv.addObject("success","package created");
		mv.setViewName("createPackage");
		
		}catch (Exception e){
			mv.addObject("failure","package details exists");
			mv.setViewName("createPackage");
		}
		return mv;
	}
	
	@GetMapping(path = "/listPackages")
	public ModelAndView listPackages() {
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<Void> req = new HttpEntity<>(headers);

		ResponseEntity<List<PackageDTO>> response = rest.exchange("http://localhost:9082/admin/listPackage", HttpMethod.GET,
				req, new ParameterizedTypeReference<List<PackageDTO>>() {
				});
		mv.addObject("packList", response.getBody());
		mv.setViewName("listPackages");
		return mv;
	}
	
	@GetMapping(path = "/listBookings")
	public ModelAndView listBookings() {
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<Void> req = new HttpEntity<>(headers);

		ResponseEntity<List<BookingDTO>> response = rest.exchange("http://localhost:9082/admin/listBooking", HttpMethod.GET,
				req, new ParameterizedTypeReference<List<BookingDTO>>() {
				});
		mv.addObject("bookList", response.getBody());
		mv.setViewName("listBookings");
		return mv;
	}
	
	
	@PostMapping(path="/updatePack")
	public ModelAndView updatePackage(PackageDTO packageDTO) {
		
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<PackageDTO> request = new HttpEntity<>(packageDTO, headers);
		try {
		
		rest.exchange("http://localhost:9082/admin/updatePackage",HttpMethod.PUT, request,
					String.class);

		mv.addObject("success","package updated");
		mv.setViewName("updatePackage");
		
		}catch (Exception e){
			mv.addObject("failure","package does not exist");
			mv.setViewName("updatePackage");
		}
		return mv;
	}
	
	@PostMapping(path="/deletePack")
	public ModelAndView deletePackage(int code) {
		
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<Void> request = new HttpEntity<>(headers);
		try {
		
		rest.exchange("http://localhost:9082/admin/deletePackage/"+code,HttpMethod.DELETE, request,
					String.class);

		mv.addObject("success","package deleted");
		mv.setViewName("deletePackage");
		
		}catch (Exception e){
			mv.addObject("failure","package does not exist with this ID");
			mv.setViewName("deletePackage");
		}
		return mv;
	}
	
	@PostMapping(path="/deleteBook")
	public ModelAndView deleteBooking(int bookingId) {
		
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<Void> request = new HttpEntity<>(headers);
		try {
		
		rest.exchange("http://localhost:9082/admin/delete/"+bookingId,HttpMethod.DELETE, request,
					String.class);

		mv.addObject("success","Booking deleted");
		mv.setViewName("deleteBooking");
		
		}catch (Exception e){
			mv.addObject("failure","Booking does not exist with this ID");
			mv.setViewName("deleteBooking");
		}
		return mv;
	}
	
	@PostMapping(path="/assign")
	public ModelAndView deleteBooking(int bookingId,int staffId) {
		
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<Void> request = new HttpEntity<>(headers);
		try {
		
		rest.exchange("http://localhost:9082/admin/addStaff/"+bookingId+"/"+staffId,HttpMethod.PATCH, request,
					String.class);

		mv.addObject("success","Staff Assigned");
		mv.setViewName("assignStaff");
		
		}catch (Exception e){
			mv.addObject("failure","Please Check with the Booking Id/StaffId");
			mv.setViewName("assignStaff");
		}
		return mv;
	}
	
	
	@GetMapping(path = "/listPackagesForCustomer")
	public ModelAndView listPackagesForCustomer() {
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<Void> req = new HttpEntity<>(headers);

		ResponseEntity<List<PackageDTO>> response = rest.exchange("http://localhost:9082/customer/listPackage", HttpMethod.GET,
				req, new ParameterizedTypeReference<List<PackageDTO>>() {
				});
		mv.addObject("packList", response.getBody());
		mv.setViewName("listPackagesForCustomer");
		return mv;
	}
	
	@GetMapping(path = "/myBooking")
	public ModelAndView myBookings(String userName) {
		ModelAndView mv = new ModelAndView();
		HttpHeaders headers = new HttpHeaders();
		headers.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<Void> req = new HttpEntity<>(headers);

		ResponseEntity<List<BookingDTO>> response = rest.exchange("http://localhost:9082/customer/listBookings/"+userName, HttpMethod.GET,
				req, new ParameterizedTypeReference<List<BookingDTO>>() {
				});
		mv.addObject("packList", response.getBody());
		mv.setViewName("listPackagesForCustomer");
		return mv;
	}	
	
}
