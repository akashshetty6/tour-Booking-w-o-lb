package com.publicissapient.tour.controller;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.publicissapient.tour.dto.PackageDTO;
import com.publicissapient.tour.entity.Booking;
import com.publicissapient.tour.entity.Packages;
import com.publicissapient.tour.service.AdminServiceImpl;
import com.publicissapient.tour.util.Message;

import io.micrometer.core.annotation.Timed;

@RestController
@RequestMapping("/admin")
public class AdminRestController {

	@Autowired
	AdminServiceImpl adminServiceImpl;
	
	private Logger logger = LogManager.getLogger(this.getClass().getName());

	@PostMapping(path = "/create", consumes = MediaType.APPLICATION_JSON_VALUE)
	@Timed(value="requests.count.create")
	public ResponseEntity<Message> create(@RequestBody PackageDTO packageDTO) {
		adminServiceImpl.create(packageDTO);
		logger.info("call for creating a package");
		return ResponseEntity.ok(new Message("packages created"));
	}

	@GetMapping(path = "/listPackage")
	@Timed(value="requests.count.listAllPackages")
	public ResponseEntity<List<Packages>> listAllPackages() {
		logger.info("call for list all packages");
		return ResponseEntity.ok(adminServiceImpl.listAllPackages());
	}
	
	@GetMapping(path = "/listBooking")
	@Timed(value="requests.count.listAllBookings")
	public ResponseEntity<List<Booking>> listAllBookings() {
		logger.info("call for list all bookings");
		return ResponseEntity.ok(adminServiceImpl.listAllBookings());
	}

	@PutMapping(path="/updatePackage",consumes=MediaType.APPLICATION_JSON_VALUE)
	@Timed(value="requests.count.updateWholePackage")
	public ResponseEntity<Message> updateWholePackage(@RequestBody PackageDTO packageDto){
		adminServiceImpl.updateWholePackage(packageDto);
		logger.info("call for updating a package");
	    return ResponseEntity.ok(new Message("Package updated successfully"));
    }
		
	@DeleteMapping(path = "/deletePackage/{code}")
	@Timed(value="requests.count.deletePackage")
	public ResponseEntity<Message> deletePackage(@PathVariable("code") int code) {
		adminServiceImpl.deletePackage(code);
		return ResponseEntity.ok(new Message("package deleted by this id :" + code));
	}

	@DeleteMapping(path = "/delete/{bookingId}")
	@Timed(value="requests.count.delete")
	public ResponseEntity<Message> delete(@PathVariable("bookingId") int id) {
		adminServiceImpl.delete(id);
		return ResponseEntity.ok(new Message("Booking is deleted"));
	}

	@PutMapping("/addStaff/{bookingId}/{staffId}")
	@Timed(value="requests.count.assignStaff")
	public ResponseEntity<Message> assignStaff(@PathVariable("bookingId") int bId, @PathVariable("staffId") int sId)  {
		adminServiceImpl.assignStaff(bId, sId);
		return ResponseEntity.ok(new Message("staff assigned"));
	}
	
}
