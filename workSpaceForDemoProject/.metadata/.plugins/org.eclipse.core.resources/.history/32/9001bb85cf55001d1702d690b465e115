package com.publicissapient.tour;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.web.servlet.MockMvc;

import com.publicissapient.tour.entity.Booking;
import com.publicissapient.tour.repository.BookingRepository;

@SpringBootTest
@AutoConfigureMockMvc
public class PaymentRestControllerTest {

	@Autowired
	MockMvc mvc;

	@MockBean
	BookingRepository bookingRepo;

	@Test
	 void updateStatusTest() throws Exception {
		Booking booking = new Booking("akash", 1, 3, 330.0);

		when(bookingRepo.findById(1)).thenReturn(Optional.of(booking));
		mvc.perform(get("/v1/payment/1")).andDo(print()).andExpect(status().isOk())
		.andExpect(jsonPath("$.status").value("Status updated"));
		
		mvc.perform(get("/v1/payment/2")).andDo(print()).andExpect(status().is4xxClientError());
		
		
	} 
	
	

}
