package com.publicissapient.tour.service;

import java.util.List;
import java.util.Optional;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.publicissapient.tour.controller.PaymentController;
import com.publicissapient.tour.dto.BookingDTO;
import com.publicissapient.tour.entity.Booking;
import com.publicissapient.tour.entity.Packages;
import com.publicissapient.tour.exception.BookingNotFoundException;
import com.publicissapient.tour.exception.PackageNotFoundException;
import com.publicissapient.tour.exception.UserNameDoesNotExistsException;
import com.publicissapient.tour.repository.BookingRepository;
import com.publicissapient.tour.repository.PackageRepository;

@Service
public class CustomerServiceImpl implements CustomerService {

	@Autowired
	RestTemplate rest;

	@Autowired
	PackageRepository packageRepo;

	@Autowired
	BookingRepository bookingRepo;

	@Autowired
	RestTemplate restTemplate;

	@Autowired
	PaymentController payment;

	private Logger logger = LogManager.getLogger(this.getClass().getName());

	@Override
	public List<Packages> listAllPackages() {
		logger.info("Package List : {}", packageRepo.findAll());
		return packageRepo.findAll();
	}

	@Override
	public Booking booking(BookingDTO bookingDTO) {

		HttpHeaders header = new HttpHeaders();
		header.set("Accept", MediaType.APPLICATION_JSON_VALUE);
		HttpEntity<Void> req = new HttpEntity<>(header);

		String email = bookingDTO.getUserName();

		ResponseEntity<Boolean> response = restTemplate.exchange("http://localhost:8087/registration/byEmail/" + email,
				HttpMethod.GET, req, Boolean.class);
		
		if (Boolean.TRUE.equals(response.getBody())) {
			
			if (packageRepo.existsById(bookingDTO.getCode())) {
				Optional<Packages> packageOp = packageRepo.findById(bookingDTO.getCode());
				if (packageOp.isPresent()) {
					int fees = packageOp.get().getFees();
					bookingDTO.setTotalPrice(fees * ((Double)bookingDTO.getNoOfPeople()));
				}

				Booking booking = new Booking(bookingDTO.getUserName(), bookingDTO.getCode(), bookingDTO.getFromDate(),
						bookingDTO.getNoOfPeople(), bookingDTO.getTotalPrice());

				logger.info("Package Booked");
				return bookingRepo.save(booking); 

			} else {
				logger.error("package not found for the id {}",bookingDTO.getCode());
				throw new PackageNotFoundException("package not found for the id " + bookingDTO.getCode());
			}
		} else {
			logger.error("user not found {}",bookingDTO.getUserName());
			throw new UserNameDoesNotExistsException("user not found :" + bookingDTO.getUserName());
		}
	}

	@Override
	public void delete(int id) {
		if (bookingRepo.existsById(id)) {
			bookingRepo.deleteById(id);
			logger.info("Booking Deleted with Booking Id {}",id);
		} else {
			logger.error("booking not found by this id {}",id);
			throw new BookingNotFoundException("booking not found by this id :" + id);
		}

	}

	@Override
	public List<Booking> listBookings(String userName) {
		logger.info("Booking List For the {} :{}",userName,bookingRepo.findAllByUserName(userName));
		return bookingRepo.findAllByUserName(userName);
	}

}
